{"version":3,"sources":["components/Todos.js","actions/deleteActions.js","actions/types.js","components/AddTodo.js","actions/addActions.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Todos","props","deleteTodo","e","id","preventDefault","className","this","todoList","map","todo","key","body","onClick","React","Component","connect","state","todos","dispatch","type","AddTodo","handelChange","event","setState","target","value","handelSubmit","Math","floor","random","addTodo","onSubmit","name","autocomplete","onChange","todoData","payload","initialState","reducer","action","filter","middleWare","thunk","store","createStore","rootReducer","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAMOA,E,YAEH,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAGVC,WAAa,SAACC,EAAGC,GACbD,EAAEE,iBACF,EAAKJ,MAAMC,WAAWE,IANR,E,sEAWR,IAAD,OACL,OACI,yBAAKE,UAAU,aACX,yBAAKA,UAAU,oBAGNC,KAAKN,MAAMO,SAASC,KAAI,SAACC,EAAMC,GAC5B,OACI,yBAAML,UAAU,mBACZ,0BAAMA,UAAU,mBAAmBI,EAAKE,MACxC,4BAAQC,QAAS,SAACV,GAAO,EAAKD,WAAWC,EAAGO,EAAKN,MAAjD,e,GAvBfU,IAAMC,WAiDZC,eAVS,SAACC,GACrB,MAAO,CACHT,SAAUS,EAAMC,SAQgB,CAAEhB,WCrDhB,SAACE,GAAD,OAAQ,SAAAe,GAE9B,OAAOA,EAAS,CACZC,KCJ0B,qBDK1BhB,GAAIA,ODiDGY,CAAyChB,GGjDlDqB,E,YACF,WAAYpB,GAAQ,IAAD,8BACf,4CAAMA,KAOVqB,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVZ,KAAMW,EAAME,OAAOC,SAVR,EAcnBC,aAAe,SAACJ,GACZA,EAAMlB,iBACN,IAAMD,EAAKwB,KAAKC,MAAsB,IAAhBD,KAAKE,UACrBpB,EAAO,CACTE,KAAM,EAAKK,MAAML,KACjBR,GAAIA,GAER,EAAKH,MAAM8B,QAAQrB,GACnB,EAAKc,SAAS,CACVZ,KAAM,MArBV,EAAKK,MAAQ,CACTL,KAAM,GACNR,GAAI,EAAKA,IAJE,E,sEA8Bf,OACI,yBAAKE,UAAU,aACX,0BAAM0B,SAAUzB,KAAKoB,cACjB,iDACA,2BAAOP,KAAK,OAAOa,KAAK,OAAOC,aAAa,MAAMC,SAAU5B,KAAKe,aAAcI,MAAOnB,KAAKU,MAAML,OACjG,4BAAQQ,KAAK,UAAb,gB,GApCEN,IAAMC,WA+CbC,cAAQ,KAAM,CAAEe,QClDR,SAACK,GAAD,OAAc,SAAAjB,GACjC,OAAOA,EAAS,CACZC,KFLuB,kBEMvBiB,QAASD,OD+CFpB,CAA2BK,G,+BElDpCiB,EAAe,CACjBpB,MAAO,CACH,CAACd,GAAI,EAAGQ,KAAM,iBACd,CAACR,GAAI,EAAGQ,KAAM,wBAsBP2B,EAlBC,WAAmC,IAAlCtB,EAAiC,uDAAzBqB,EAAcE,EAAW,uCAC9C,OAAQA,EAAOpB,MACX,IHZuB,kBGanB,OAAO,eACAH,EADP,CAEIC,MAAM,GAAD,mBAAMD,EAAMC,OAAZ,CAAmB,CAACd,GAAIoC,EAAOH,QAAQjC,GAAIQ,KAAM4B,EAAOH,QAAQzB,UAG7E,IHjB0B,qBGkBtB,MAAO,CACHM,MAAOD,EAAMC,MAAMuB,QAAO,SAAC/B,GAAD,OACtBA,EAAKN,KAAOoC,EAAOpC,OAE/B,QACI,OAAOa,ICZbyB,EAAa,CAACC,KAQLC,EANDC,YACVC,EAXwB,CACxB5B,MAAO,CACH,CAACd,GAAI,EAAGQ,KAAM,iBACd,CAACR,GAAI,EAAGQ,KAAM,wBAUlBmC,IAAe,WAAf,EAAmBL,ICcRM,E,iLAbX,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,6BACE,wBAAItC,UAAU,oBAAd,UACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAjBMQ,IAAMC,WCMJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAQ,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD8H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.39bdcbf1.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport { deleteTodo } from '../actions/deleteActions';\n\n\n class Todos extends React.Component {\n\n    constructor(props){\n        super(props);\n      }\n      \n    deleteTodo = (e, id) => {\n        e.preventDefault();\n        this.props.deleteTodo(id);\n       // console.log(this.props.todoList);\n       // console.log(store.getState());\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"todos collection\">\n                    {   \n                        //this.props.todos.length ? \n                        (this.props.todoList.map((todo, key) => {\n                            return (\n                                <div  className=\"collection-item\">\n                                    <span className=\"collection-item\">{todo.body}</span>\n                                    <button onClick={(e) => {this.deleteTodo(e, todo.id)}}>x</button> \n                                </div>\n                                \n                            )\n                        }))\n                       // :\n                        //<p className=\"center black-text\">You have no todo's in your list</p>\n                    }\n                </div>\n            </div>\n        )\n    }\n   \n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        todoList: state.todos\n    }\n}\n\nTodos.propTypes = {\n    deleteTodo: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, { deleteTodo })(Todos)","import { ACTION_DELETE_TODO } from './types'\n\nexport const deleteTodo = (id) => dispatch => {\n//debugger\n    return dispatch({\n        type: ACTION_DELETE_TODO,\n        id: id\n    });\n}","export const ACTION_ADD_TODO = 'ACTION_ADD_TODO';\nexport const ACTION_DELETE_TODO = 'ACTION_DELETE_TODO'; ","import React from 'react';\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types';\nimport { addTodo } from '../actions/addActions';\n\n\nclass AddTodo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            body: '',\n            id: this.id\n        }\n    }\n\n    handelChange = (event) => {\n        this.setState({\n            body: event.target.value\n        });\n    }\n\n    handelSubmit = (event) => {\n        event.preventDefault();\n        const id = Math.floor(Math.random() * 101);\n        const todo = {\n            body: this.state.body,\n            id: id\n        };\n        this.props.addTodo(todo);\n        this.setState({\n            body: ''\n        });\n        // console.log(store.getState());\n    }\n\n\n    render() {\n        return(\n            <div className=\"container\">\n                <form onSubmit={this.handelSubmit}>\n                    <label> Add new todo:</label>\n                    <input type=\"text\" name=\"todo\" autocomplete='off' onChange={this.handelChange} value={this.state.body} />\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired\n};\n\nexport default connect(null, { addTodo })(AddTodo)\n\n\n\n","import { ACTION_ADD_TODO } from './types';\n\n\nexport const addTodo = (todoData) => dispatch => {\n    return dispatch({\n        type: ACTION_ADD_TODO,\n        payload: todoData\n    });\n} ","import { ACTION_ADD_TODO, ACTION_DELETE_TODO } from '../actions/types';\n\n\nconst initialState = {\n    todos: [\n        {id: 1, body: 'Buy some milk'},\n        {id: 2, body: 'Walking with a dog'}\n    ]\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ACTION_ADD_TODO:\n            return {\n                ...state,\n                todos: [...state.todos, {id: action.payload.id, body: action.payload.body}]\n            \n            }\n        case ACTION_DELETE_TODO:\n            return {\n                todos: state.todos.filter((todo) => \n                    todo.id !== action.id\n                  )};\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index'\n\nexport const initialState = {\n    todos: [\n        {id: 1, body: 'Buy some milk'},\n        {id: 2, body: 'Walking with a dog'}\n    ]\n}\n\n\nconst middleWare = [thunk]\n\nconst store = createStore(\n    rootReducer, \n    initialState, \n    applyMiddleware(...middleWare)\n);\n\nexport default store;","import React from 'react';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nclass App extends React.Component{\n  /*deleteTodo = (id) => {\n    const todos = this.state.todos.filter((todo) => {\n      return todo.id !== id\n    });\n    this.setState({\n      todos: todos\n    });\n  }*/\n\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div>\n          <h1 className=\"center blue-text\">Todo's</h1>\n            <Todos />\n            <AddTodo />\n        </div>\n      </Provider>\n    );\n  }\n}\n\n\nexport default App\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((<App />), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}